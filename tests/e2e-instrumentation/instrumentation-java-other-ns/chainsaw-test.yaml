# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  creationTimestamp: null
  name: instrumentation-java-other-ns
spec:
  steps:
  - name: step-01
    try:
    # In OpenShift, when a namespace is created, all necessary SCC annotations are automatically added. However, if a namespace is created using a resource file with only selected SCCs, the other auto-added SCCs are not included. Therefore, the UID-range and supplemental groups SCC annotations must be set after the namespace is created.
    - command:
        entrypoint: kubectl
        args:
        - annotate
        - namespace
        - ${NAMESPACE}
        - openshift.io/sa.scc.uid-range=1000/1000
        - --overwrite
    - command:
        entrypoint: kubectl
        args:
        - annotate
        - namespace
        - ${NAMESPACE}
        - openshift.io/sa.scc.supplemental-groups=3000/3000
        - --overwrite
    - delete:
        ref:
          apiVersion: v1
          kind: Namespace
          name: my-other-ns
  - name: step-02
    try:
    - apply:
        file: 02-install-collector.yaml
    - apply:
        file: 02-install-instrumentation.yaml
  - name: step-03
    try:
    - apply:
        file: 03-install-app.yaml
    - assert:
        file: 03-assert.yaml
    catch:
      - podLogs:
          selector: app=my-java-other-ns
  - name: "wait for app to be ready"
    try:
      - sleep:
          duration: 5s
  - name: Make a request to the app
    try:
      - script:
          content: |
            #!/bin/bash
            # set -ex
            pod=$(kubectl get pods -n $NAMESPACE | awk '{print $1}' | tail -n 1)
            kubectl get --raw /api/v1/namespaces/$NAMESPACE/pods/${pod}:8080/proxy/
          check:
            ($error): ~
            ($stdout): Hello World!
  - name: "wait for the telemetry to be there"
    try:
      - sleep:
          duration: 5s
  - name: Check the sidecar has sent request data successfully
    try:
      - script:
          content: |
            #!/bin/bash
            # set -ex
            pod=$(kubectl get pods -n $NAMESPACE | awk '{print $1}' | tail -n 1)
            kubectl get --raw /api/v1/namespaces/$NAMESPACE/pods/${pod}:8888/proxy/metrics
          check:
            ($error): ~
            # TODO: Check that the number is non-zero and that failed is zero
            (wildcard('*otelcol_exporter_sent_spans*', $stdout)): true
    catch:
      - podLogs:
          selector: app=my-java-other-ns
  - name: step-04
    try:
    - delete:
        ref:
          apiVersion: v1
          kind: Namespace
          name: my-other-ns
